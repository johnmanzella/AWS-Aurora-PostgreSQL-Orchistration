#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class VirtualSourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mount_location='/mnt/provision/aws_vdb', db_instance='db.r5.large', name='vdb', subnet_group='', validate=True):
        """VirtualSourceDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param mount_location: The mount_location of this VirtualSourceDefinition.
            :type mount_location: str
            :param db_instance: The db_instance of this VirtualSourceDefinition.
            :type db_instance: str
            :param name: The name of this VirtualSourceDefinition.
            :type name: str
            :param subnet_group: The subnet_group of this VirtualSourceDefinition.
            :type subnet_group: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'mount_location': str,
            'db_instance': str,
            'name': str,
            'subnet_group': str
        }

        self.attribute_map = {
            'mount_location': 'mountLocation',
            'db_instance': 'dbInstance',
            'name': 'name',
            'subnet_group': 'subnetGroup'
        }
        
        # Validating the attribute mount_location and then saving it.
        if validate and mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._mount_location = mount_location

        # Validating the attribute db_instance and then saving it.
        if validate and db_instance is None:
            raise GeneratedClassesError(
                "The required parameter 'db_instance' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'db_instance',
                                                          db_instance,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._db_instance = db_instance

        # Validating the attribute name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._name = name

        # Validating the attribute subnet_group and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'subnet_group',
                                                          subnet_group,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._subnet_group = subnet_group
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The virtualSourceDefinition of this VirtualSourceDefinition.
        :rtype: VirtualSourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_location(self):
        """Gets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :return: The mount_location of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._mount_location

    @mount_location.setter
    def mount_location(self, mount_location):
        """Sets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :param mount_location: The mount_location of this VirtualSourceDefinition.
        :type mount_location: str
        """
        # Validating the attribute mount_location and then saving it.
        if mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._mount_location = mount_location

    @property
    def db_instance(self):
        """Gets the db_instance of this VirtualSourceDefinition.

        The DB Instance class on which the database will be created.

        :return: The db_instance of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._db_instance

    @db_instance.setter
    def db_instance(self, db_instance):
        """Sets the db_instance of this VirtualSourceDefinition.

        The DB Instance class on which the database will be created.

        :param db_instance: The db_instance of this VirtualSourceDefinition.
        :type db_instance: str
        """
        # Validating the attribute db_instance and then saving it.
        if db_instance is None:
            raise GeneratedClassesError(
                "The required parameter 'db_instance' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'db_instance',
                                                          db_instance,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._db_instance = db_instance

    @property
    def name(self):
        """Gets the name of this VirtualSourceDefinition.

        Name must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.

        :return: The name of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualSourceDefinition.

        Name must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.

        :param name: The name of this VirtualSourceDefinition.
        :type name: str
        """
        # Validating the attribute name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._name = name

    @property
    def subnet_group(self):
        """Gets the subnet_group of this VirtualSourceDefinition.

        The Subnet Group where the Cluster should be created.

        :return: The subnet_group of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._subnet_group

    @subnet_group.setter
    def subnet_group(self, subnet_group):
        """Sets the subnet_group of this VirtualSourceDefinition.

        The Subnet Group where the Cluster should be created.

        :param subnet_group: The subnet_group of this VirtualSourceDefinition.
        :type subnet_group: str
        """
        # Validating the attribute subnet_group and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'subnet_group',
                                                          subnet_group,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._subnet_group = subnet_group
